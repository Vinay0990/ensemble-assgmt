{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["URI","App","useState","loading","setloading","symbol","position","acid","state","setstate","transcriptList","settranscriptList","finalData","setfinalData","handleChange","e","target","name","value","useEffect","forEach","element","Axios","get","id","then","results","data","seq","catch","error","console","log","className","Form","Row","Col","md","sm","lg","Control","placeholder","onChange","Button","variant","block","color","onClick","Transcript","err","Table","striped","bordered","hover","map","i","href","display_name","assembly_name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4UAKMA,G,MAAM,4BAqHGC,MAlHf,WACE,IADa,EAGiBC,oBAAS,GAH1B,mBAGNC,EAHM,KAGGC,EAHH,OAIaF,mBAHR,CAAEG,OAAQ,GAAIC,SAAU,GAAIC,KAAM,KADvC,mBAINC,EAJM,KAICC,EAJD,OAK+BP,mBAAS,IALxC,mBAKNQ,EALM,KAKUC,EALV,OAMqBT,mBAAS,IAN9B,mBAMNU,EANM,KAMKC,EANL,KAQPC,EAAe,SAACC,GACpBN,EAAS,2BAAKD,GAAN,kBAAcO,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,UAqCjD,OAZAC,qBAAU,WACRT,EAAeU,SAAQ,SAACC,GACtBC,IAAMC,IAAIvB,EAAG,sBAAkBqB,EAAQG,KACpCC,MAAK,SAACC,GACDA,EAAQC,KAAKC,IAAIpB,EAAMF,YAAcE,EAAMD,OAC7CM,EAAa,GAAD,mBAAKD,GAAL,CAAgBS,KAC5BjB,GAAW,OAGdyB,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,WAEjC,IAED,sBAAKG,UAAU,iBAAf,UACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAIC,GAAI,EAAxB,SACE,cAACL,EAAA,EAAKM,QAAN,CACEC,YAAY,gCACZvB,MAAOV,EAAMH,OACbqC,SAAU5B,EACVG,KAAK,aAGT,cAACmB,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAIC,GAAI,EAAxB,SACE,cAACL,EAAA,EAAKM,QAAN,CACEC,YAAY,yBACZvB,MAAOV,EAAMF,SACboC,SAAU5B,EACVG,KAAK,eAGT,cAACmB,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAIC,GAAI,EAAxB,SACE,cAACL,EAAA,EAAKM,QAAN,CACEC,YAAY,gCACZvB,MAAOV,EAAMD,KACbmC,SAAU5B,EACVG,KAAK,WAGT,cAACmB,EAAA,EAAD,CAAKC,GAAI,EAAGC,GAAI,GAAIC,GAAI,EAAxB,SACE,cAACI,EAAA,EAAD,CACEC,QAAQ,UACRC,OAAK,EACLC,MAAM,UACNb,UAAU,eACVc,QApES,SAAChC,GACpBX,GAAW,GACXkB,IAAMC,IACJvB,EAAG,qCAC6BQ,EAAMH,OADnC,4CAGFoB,MAAK,SAACC,GACL,IAAMC,EAAOD,EAAQC,KAAKqB,WAC1BrC,EAAkBgB,MAEnBE,OAAM,SAACoB,GAAD,OAASlB,QAAQC,IAAIiB,OAqDtB,2BAYN,wBACE9C,GACA,eAAC+C,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAA7B,UACE,gCACE,+BACE,+CACA,8CACA,oDAGJ,gCACG3C,EAAe4C,KAAI,SAAC3B,EAAM4B,GAAP,OAClB,+BACE,6BACE,mBAAGC,KAvGN,6BAuGqB7B,EAAKH,GAAvB,SAA4BG,EAAKH,OAEnC,6BAAKG,EAAK8B,eACV,6BAAK9B,EAAK+B,kBALHH,eC/FRI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBpC,MAAK,YAAkD,IAA/CqC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.d868bbeb.chunk.js","sourcesContent":["import Axios from \"axios\";\nimport { useState, useEffect } from \"react\";\nimport { Button, Col, Form, Row, Table } from \"react-bootstrap\";\nimport \"./App.css\";\n\nconst URI = \"http://rest.ensembl.org/\";\nconst ID_URI = \"http://www.ensembl.org/id/\";\n\nfunction App() {\n  const initState = { symbol: \"\", position: \"\", acid: \"\" };\n\n  const [loading, setloading] = useState(true);\n  const [state, setstate] = useState(initState);\n  const [transcriptList, settranscriptList] = useState([]);\n  const [finalData, setfinalData] = useState([]);\n\n  const handleChange = (e) => {\n    setstate({ ...state, [e.target.name]: e.target.value });\n  };\n\n  const handleSubmit = (e) => {\n    setloading(true);\n    Axios.get(\n      URI +\n        `lookup/symbol/homo_sapiens/${state.symbol}?content-type=application/json;expand=1`\n    )\n      .then((results) => {\n        const data = results.data.Transcript;\n        settranscriptList(data);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const checkTranscript = async (element) => {\n    Axios.get(URI + `sequence/id/${element.id}`).then((results) => {\n      if (results.data.seq[state.position] === state.acid) {\n        return true;\n      }\n    });\n    return false;\n  };\n\n  useEffect(() => {\n    transcriptList.forEach((element) => {\n      Axios.get(URI + `sequence/id/${element.id}`)\n        .then((results) => {\n          if (results.data.seq[state.position] === state.acid) {\n            setfinalData([...finalData, element]);\n            setloading(false);\n          }\n        })\n        .catch((error) => console.log(error));\n    });\n  }, []);\n  return (\n    <div className=\"App container \">\n      <Form>\n        <Row>\n          <Col md={6} sm={12} lg={3}>\n            <Form.Control\n              placeholder=\"Enter Genetic Symbol eg. BRAF\"\n              value={state.symbol}\n              onChange={handleChange}\n              name=\"symbol\"\n            />\n          </Col>\n          <Col md={6} sm={12} lg={3}>\n            <Form.Control\n              placeholder=\"Enter position eg. 600\"\n              value={state.position}\n              onChange={handleChange}\n              name=\"position\"\n            />\n          </Col>\n          <Col md={6} sm={12} lg={3}>\n            <Form.Control\n              placeholder=\"Enter amino acid letter eg. V\"\n              value={state.acid}\n              onChange={handleChange}\n              name=\"acid\"\n            />\n          </Col>\n          <Col md={6} sm={12} lg={3}>\n            <Button\n              variant=\"primary\"\n              block\n              color=\"primary\"\n              className=\"form-control\"\n              onClick={handleSubmit}\n            >\n              Submit\n            </Button>\n          </Col>\n        </Row>\n      </Form>\n      <hr />\n      {!loading && (\n        <Table striped bordered hover>\n          <thead>\n            <tr>\n              <th>Transcript ID</th>\n              <th>Display Name</th>\n              <th>Assembly Name</th>\n            </tr>\n          </thead>\n          <tbody>\n            {transcriptList.map((data, i) => (\n              <tr key={i}>\n                <td>\n                  <a href={ID_URI + data.id}>{data.id}</a>\n                </td>\n                <td>{data.display_name}</td>\n                <td>{data.assembly_name}</td>\n              </tr>\n            ))}\n          </tbody>\n        </Table>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}